{"version":3,"sources":["features/todoList/todoListSlicer.ts","store.ts","components/TodoTask.tsx","App.tsx","index.tsx"],"names":["todoListSlice","createSlice","name","initialState","list","prepareList","reducers","addTask","state","action","push","payload","removeTask","filter","task","id","completedTask","map","isComplete","showAllTask","showDoneTask","showTaskInProgress","showQueryTask","taskName","toLowerCase","includes","actions","configureStore","reducer","todo","todoListReducer","TodoTask","deleteTask","completeTask","className","width","src","alt","role","aria-label","type","onClick","App","useState","setTask","query","setQuery","prepareTodoList","useSelector","dispatch","useDispatch","handleChange","event","target","value","addTodo","newTask","uuidv4","length","taskIdToDelete","taskIdToComplete","onSubmit","e","preventDefault","htmlFor","placeholder","onKeyPress","key","onChange","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.feec832c.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { ITask } from '../../Interfaces';\n\ninterface TodoListSlices {\n  list: ITask[],\n  prepareList: ITask[],\n}\n\nexport const todoListSlice = createSlice({\n  name: 'todoList',\n  initialState: {\n    list: [],\n    prepareList: [],\n  },\n  reducers: {\n    addTask: (state: TodoListSlices, action) => {\n      state.list.push(action.payload);\n      state.prepareList.push(action.payload);\n    },\n\n    removeTask: (state: TodoListSlices, action) => {\n      state.list = state.list.filter((task: ITask) => {\n        return task.id !== action.payload;\n      });\n\n      state.prepareList = state.prepareList.filter((task: ITask) => {\n        return task.id !== action.payload;\n      });\n    },\n\n    completedTask: (state: TodoListSlices, action) => {\n      state.list = state.list.map((task: ITask) => {\n        if (task.id === action.payload) {\n          task.isComplete = !task.isComplete;\n        }\n\n        return task;\n      });\n\n      state.prepareList = state.prepareList.map((task: ITask) => {\n        if (task.id === action.payload) {\n          task.isComplete = !task.isComplete;\n        }\n\n        return task;\n      });\n    },\n\n    showAllTask: (state: TodoListSlices) => {\n      state.prepareList = state.list.filter((task: ITask) => task);\n    },\n\n    showDoneTask: (state: TodoListSlices) => {\n      state.prepareList = state.list.filter((task: ITask) => task.isComplete === true);\n    },\n\n    showTaskInProgress: (state: TodoListSlices) => {\n      state.prepareList = state.list.filter((task: ITask) => task.isComplete === false);\n    },\n\n    showQueryTask: (state: TodoListSlices, action) => {\n      state.prepareList = state.list.filter((task: ITask) => {\n        return task.taskName.toLowerCase().includes(\n          action.payload.toLowerCase(),\n        );\n      });\n    },\n\n  },\n});\n\nexport const {\n  addTask,\n  removeTask,\n  completedTask,\n  showTaskInProgress,\n  showAllTask,\n  showDoneTask,\n  showQueryTask,\n} = todoListSlice.actions;\n\nexport default todoListSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoListReducer from './features/todoList/todoListSlicer';\n\nexport default configureStore({\n  reducer: {\n    todo: todoListReducer,\n  },\n});\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/quotes */\nimport React from \"react\";\nimport { ITask } from \"../Interfaces\";\n\ninterface Props {\n  task: ITask;\n  deleteTask(taskNameToDelete:string): void;\n  completeTask(taskNameToComplete:string): void;\n}\n\nconst TodoTask = ({ task, deleteTask, completeTask }: Props) => {\n  return (\n    <div className=\"task\">\n      <div className=\"content\">\n        <img\n          width=\"42px\"\n          src={!task.isComplete ? './square.svg' : './square_ok.svg'}\n          alt=\"\"\n        />\n        <span className=\"btn-light\">\n          {task.taskName}\n        </span>\n      </div>\n      <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n        <button\n          className=\"btn btn-dark btn-sm\"\n          type=\"button\"\n          onClick={() => {\n            completeTask(task.id);\n          }}\n        >\n          Complete Task\n        </button>\n        <button\n          className=\"btn btn-dark btn-sm\"\n          type=\"button\"\n          onClick={() => {\n            deleteTask(task.id);\n          }}\n        >\n          X\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoTask;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, {\n  FC,\n  ChangeEvent,\n  useState,\n} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  addTask,\n  removeTask,\n  completedTask,\n  showTaskInProgress,\n  showAllTask,\n  showDoneTask,\n  showQueryTask,\n} from './features/todoList/todoListSlicer';\nimport TodoTask from './components/TodoTask';\nimport { ITask, RootState } from './Interfaces';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport const App: FC = () => {\n  const [task, setTask] = useState('');\n  const [query, setQuery] = useState('');\n  const prepareTodoList = useSelector((state: RootState) => state.todo.prepareList);\n  const dispatch = useDispatch();\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.name === 'task') {\n      setTask(event.target.value);\n    } else {\n      setQuery(event.target.value);\n      dispatch(showQueryTask(event.target.value));\n    }\n  };\n\n  const addTodo = () => {\n    const newTask = {\n      taskName: task,\n      isComplete: false,\n      id: uuidv4(),\n    };\n\n    if (task.length !== 0) {\n      dispatch(addTask(newTask));\n      setTask('');\n    }\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      addTodo();\n    }\n  };\n\n  const deleteTask = (taskIdToDelete: string) => dispatch(removeTask(taskIdToDelete));\n  const completeTask = (taskIdToComplete: string) => dispatch(completedTask(taskIdToComplete));\n  const showAll = () => {\n    setQuery('');\n    dispatch(showAllTask());\n  };\n\n  const showInProgress = () => {\n    setQuery('');\n    dispatch(showTaskInProgress());\n  };\n\n  const showDone = () => {\n    setQuery('');\n    dispatch(showDoneTask());\n  };\n\n  return (\n    <div className=\"App\">\n      <form\n        className=\"d-flex flex-column\"\n        onSubmit={e => {\n          e.preventDefault();\n        }}\n      >\n        <div className=\"mb-3 row\">\n          <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">Create task</label>\n          <div className=\"d-flex\">\n            <input\n              type=\"text\"\n              placeholder=\"Please enter task\"\n              name=\"task\"\n              value={task}\n              onKeyPress={(e) => handleKeyPress(e)}\n              onChange={(event) => (\n                handleChange(event)\n              )}\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n            />\n            <button\n              type=\"button\"\n              className=\"btn btn-light\"\n              onClick={addTodo}\n            >\n              Add Task\n            </button>\n          </div>\n          <label htmlFor=\"exampleInputEmail2\" className=\"form-label\">Search task</label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter key word\"\n            name=\"query\"\n            value={query}\n            onChange={(event) => (\n              handleChange(event)\n            )}\n            className=\"form-control\"\n            id=\"exampleInputEmail2\"\n          />\n        </div>\n        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n          <button type=\"button\" className=\"btn btn-dark\" onClick={showAll}>Show All</button>\n          <button type=\"button\" className=\"btn btn-dark\" onClick={showInProgress}>In progress</button>\n          <button type=\"button\" className=\"btn btn-dark\" onClick={showDone}>Done task</button>\n        </div>\n      </form>\n\n      <ul className=\"list-group\">\n        {/* eslint-disable-next-line no-shadow */}\n        {prepareTodoList.map((task: ITask) => {\n          return (\n            <li className=\"list-group-item\" key={task.id}>\n              <TodoTask\n                task={task}\n                deleteTask={deleteTask}\n                completeTask={completeTask}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}