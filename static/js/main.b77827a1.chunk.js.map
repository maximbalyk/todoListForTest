{"version":3,"sources":["features/todoList/todoListSlicer.ts","store.ts","components/CreateTask/CreateTask.tsx","components/SearchTask/SearchTask.tsx","components/TodoTask.tsx","components/TaskList/TaskList.tsx","App.tsx","useApp.tsx","index.tsx"],"names":["todoListSlice","createSlice","name","initialState","list","prepareList","reducers","addTask","state","action","push","payload","removeTask","filter","task","id","completedTask","map","isComplete","showAllTask","showDoneTask","showQueryTask","taskName","toLowerCase","includes","actions","configureStore","reducer","todo","todoListReducer","CreateTask","handleKeyPress","handleChange","addTodo","style","width","className","onSubmit","e","preventDefault","htmlFor","type","placeholder","value","onKeyPress","onChange","event","onClick","SearchTask","query","TodoTask","deleteTask","completeTask","src","alt","TaskList","currentList","showDone","showInProgress","showAll","role","aria-label","length","App","useState","setTask","setQuery","setCurrentList","todoList","useSelector","dispatch","useDispatch","useEffect","newTask","uuidv4","item","taskIdToComplete","taskIdToDelete","key","target","useApp","maxWidth","margin","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.b77827a1.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { ITask } from '../../Interfaces';\n\ninterface TodoListSlices {\n  list: ITask[],\n  prepareList: ITask[],\n}\n\nexport const todoListSlice = createSlice({\n  name: 'todoList',\n  initialState: {\n    list: [],\n    prepareList: [],\n  },\n  reducers: {\n    addTask: (state: TodoListSlices, action) => {\n      state.list.push(action.payload);\n      state.prepareList = state.list;\n    },\n\n    removeTask: (state: TodoListSlices, action) => {\n      state.list = state.list.filter((task: ITask) => {\n        return task.id !== action.payload;\n      });\n\n      state.prepareList = state.list;\n    },\n\n    completedTask: (state: TodoListSlices, action) => {\n      state.list = state.list.map((task: ITask) => {\n        if (task.id === action.payload) {\n          task.isComplete = !task.isComplete;\n        }\n\n        return task;\n      });\n\n      state.prepareList = state.list;\n    },\n\n    showAllTask: (state: TodoListSlices) => {\n      state.prepareList = state.list.filter((task: ITask) => task);\n    },\n\n    showDoneTask: (state: TodoListSlices) => {\n      state.prepareList = state.list.filter((task: ITask) => task.isComplete === true);\n    },\n\n    showQueryTask: (state: TodoListSlices, action) => {\n      state.prepareList = state.list.filter((task: ITask) => {\n        return task.taskName.toLowerCase().includes(\n          action.payload.toLowerCase(),\n        );\n      });\n    },\n\n  },\n});\n\nexport const {\n  addTask,\n  removeTask,\n  completedTask,\n  showAllTask,\n  showDoneTask,\n  showQueryTask,\n} = todoListSlice.actions;\n\nexport default todoListSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoListReducer from './features/todoList/todoListSlicer';\n\nexport default configureStore({\n  reducer: {\n    todo: todoListReducer,\n  },\n});\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport { ITask } from '../../Interfaces';\n\ninterface CreateTaskProps {\n  task: ITask | any;\n  handleKeyPress: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  addTodo: () => void;\n}\n\nconst CreateTask: React.FC<CreateTaskProps> = ({\n  task,\n  handleKeyPress,\n  handleChange,\n  addTodo,\n}) => {\n  return (\n    <form\n      style={{ width: '100%' }}\n      className=\"d-flex flex-column\"\n      onSubmit={e => {\n        e.preventDefault();\n      }}\n    >\n      <div className=\"mb-3 row\">\n        <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">Create task</label>\n\n        <input\n          type=\"text\"\n          placeholder=\"Please enter task\"\n          name=\"task\"\n          value={task}\n          onKeyPress={(e) => handleKeyPress(e)}\n          onChange={(event) => (\n            handleChange(event)\n          )}\n          className=\"form-control\"\n          id=\"exampleInputEmail1\"\n        />\n        <button\n          type=\"button\"\n          className=\"btn btn-dark col-3\"\n          onClick={addTodo}\n        >\n          Add Task\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default CreateTask;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\n\ninterface SearchTaskProps {\n  query: string | any;\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst SearchTask: React.FC<SearchTaskProps> = ({\n  query,\n  handleChange,\n}) => {\n  return (\n    <>\n      <label htmlFor=\"exampleInputEmail2\" className=\"form-label\">Search task</label>\n      <input\n        style={{ width: 700 }}\n        type=\"text\"\n        placeholder=\"Enter key word\"\n        name=\"item\"\n        value={query}\n        onChange={(event) => (\n          handleChange(event)\n        )}\n        className=\"form-control\"\n        id=\"exampleInputEmail2\"\n      />\n    </>\n  );\n};\n\nexport default SearchTask;\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/quotes */\nimport React from \"react\";\nimport { ITask } from \"../Interfaces\";\n\ninterface Props {\n  task: ITask;\n  deleteTask(taskNameToDelete:string): void;\n  completeTask(taskNameToComplete:string): void;\n}\n\nconst TodoTask = ({ task, deleteTask, completeTask }: Props) => {\n  return (\n    <div className=\"task\">\n      <div className=\"content\">\n        <button\n          className=\"buttonIcon\"\n          type=\"button\"\n          onClick={() => {\n            completeTask(task.id);\n          }}\n        >\n          <img\n            width=\"42px\"\n            src={!task.isComplete ? './square.svg' : './square_ok.svg'}\n            alt=\"complete_image\"\n          />\n        </button>\n        <span className=\"btn-light\">\n          {task.taskName}\n        </span>\n      </div>\n      <button\n        className=\"btn btn-dark btn-sm\"\n        type=\"button\"\n        onClick={() => {\n          completeTask(task.id);\n        }}\n      >\n        Complete Task\n      </button>\n      <button\n        className=\"btn btn-danger btn-sm\"\n        type=\"button\"\n        onClick={() => {\n          deleteTask(task.id);\n        }}\n      >\n        Delete task\n      </button>\n    </div>\n  );\n};\n\nexport default TodoTask;\n","import React from 'react';\nimport { ITask } from '../../Interfaces';\nimport TodoTask from '../TodoTask';\n\ninterface TaskListProps {\n  currentList: ITask[];\n  showDone: () => void;\n  showInProgress: () => void;\n  showAll: () => void;\n  deleteTask(taskNameToDelete:string): void;\n  completeTask(taskNameToComplete:string): void;\n}\n\nconst TaskList: React.FC<TaskListProps> = ({\n  currentList,\n  showDone,\n  showInProgress,\n  showAll,\n  completeTask,\n  deleteTask,\n}) => {\n  return (\n    <>\n      <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n        <button type=\"button\" className=\"btn btn-dark\" onClick={showAll}>Show All</button>\n        <button type=\"button\" className=\"btn btn-dark\" onClick={showInProgress}>In progress</button>\n        <button type=\"button\" className=\"btn btn-dark\" onClick={showDone}>Done task</button>\n      </div>\n\n      {!currentList.length\n        ? <div className=\"alert alert-dark\">You have no task</div>\n        : null}\n      <ul className=\"list-group\">\n        {/* eslint-disable-next-line no-shadow */}\n        {currentList.map((task: ITask) => {\n          return (\n            <li className=\"list-group-item\" key={task.id}>\n              <TodoTask\n                task={task}\n                deleteTask={deleteTask}\n                completeTask={completeTask}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default TaskList;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, {\n  FC,\n} from 'react';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useApp } from './useApp';\nimport CreateTask from './components/CreateTask/CreateTask';\nimport SearchTask from './components/SearchTask/SearchTask';\nimport TaskList from './components/TaskList/TaskList';\n\nexport const App: FC = () => {\n  const {\n    showDone,\n    showInProgress,\n    showAll,\n    completeTask,\n    deleteTask,\n    handleKeyPress,\n    addTodo,\n    handleChange,\n    query,\n    currentList,\n    task,\n  } = useApp();\n\n  return (\n    <div style={{ maxWidth: 700, margin: '0 auto' }} className=\"App d-flex align-items-start\">\n      <CreateTask\n        task={task}\n        handleKeyPress={handleKeyPress}\n        handleChange={handleChange}\n        addTodo={addTodo}\n      />\n      <SearchTask query={query} handleChange={handleChange} />\n      <TaskList\n        currentList={currentList}\n        showDone={showDone}\n        showInProgress={showInProgress}\n        showAll={showAll}\n        completeTask={completeTask}\n        deleteTask={deleteTask}\n      />\n    </div>\n  );\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport { ChangeEvent, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addTask,\n  completedTask,\n  removeTask,\n} from './features/todoList/todoListSlicer';\nimport { ITask, RootState } from './Interfaces';\n\nexport const useApp = () => {\n  const [task, setTask] = useState('');\n  const [query, setQuery] = useState('');\n  const [currentList, setCurrentList] = useState<ITask[]>([]);\n  const todoList = useSelector((state: RootState) => state.todo.list);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setCurrentList(todoList.length ? todoList : []);\n  }, [todoList]);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.name === 'task') {\n      setTask(event.target.value);\n    } else {\n      setQuery(event.target.value);\n      setCurrentList(todoList.filter((item: ITask) => {\n        return item.taskName.toLowerCase().includes(\n          event.target.value.toLowerCase(),\n        );\n      }));\n    }\n  };\n\n  const addTodo = () => {\n    const newTask = {\n      taskName: task,\n      isComplete: false,\n      id: uuidv4(),\n    };\n\n    if (task.length !== 0) {\n      dispatch(addTask(newTask));\n      setTask('');\n    }\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      addTodo();\n    }\n  };\n\n  const deleteTask = (taskIdToDelete: string) => dispatch(removeTask(taskIdToDelete));\n  const completeTask = (taskIdToComplete: string) => dispatch(completedTask(taskIdToComplete));\n  const showAll = () => {\n    setQuery('');\n    setCurrentList(todoList);\n  };\n\n  const showInProgress = () => {\n    setQuery('');\n    setCurrentList(todoList.filter((item: ITask) => {\n      return item.isComplete === false;\n    }));\n  };\n\n  const showDone = () => {\n    setQuery('');\n    setCurrentList(todoList.filter((item: ITask) => {\n      return item.isComplete === true;\n    }));\n  };\n\n  return {\n    showDone,\n    showInProgress,\n    showAll,\n    completeTask,\n    deleteTask,\n    handleKeyPress,\n    addTodo,\n    handleChange,\n    query,\n    currentList,\n    task,\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}